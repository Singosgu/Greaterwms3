name: Nuitka Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      # 检出你的仓库代码
      uses: actions/checkout@v4

    - name: Set up Python
      # 设置 Python 环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka
        pip install -r requirements.txt

    - name: Set Django Settings for GitHub Actions
      run: |
        echo "DJANGO_SETTINGS_MODULE=bomiot.server.server.settings" >> $env:GITHUB_ENV
        echo "RUN_MAIN=true" >> $env:GITHUB_ENV
      shell: pwsh # 使用 pwsh (PowerShell) 是在 Windows 上最原生和可靠的方式

    - name: Create dummy files for Nuitka to include (Windows)
      run: |
        'dbs', 'logs', 'main' | ForEach-Object { mkdir $_ -Force }
        touch logo.ico
      shell: pwsh
      if: runner.os == 'Windows'

    - name: Create dummy files for Nuitka to include (Unix)
      run: |
        mkdir -p dbs logs main
        touch logo.ico
      shell: bash
      if: runner.os != 'Windows'

    - name: Build Executable with Nuitka
      run: |
        # 在所有系统上，将当前目录添加到 PYTHONPATH
        # 这能确保 Nuitka 及其子进程可以找到你的项目模块
        echo "PYTHONPATH: $PYTHONPATH"
        export PYTHONPATH=.:$PYTHONPATH
        
        # 运行你的 build.py 脚本
        python build.py
      # env 块确保环境变量在整个步骤中都可用
      env:
        DJANGO_SETTINGS_MODULE: bomiot.server.server.settings
        RUN_MAIN: true
        PYTHONIOENCODING: utf-8
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }} Build
        path: | # match what's created for the 3 OSes
            build/*.exe
            build/*.bin
            build/*.app/**/*