name: Nuitka Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    
    steps:
    - name: Checkout code
      # 检出你的仓库代码
      uses: actions/checkout@v4

    - name: Set up Python
      # 设置 Python 环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka
        pip install -r requirements.txt

    - name: Create dummy files for Nuitka to include (Windows)
      run: |
        'dbs', 'logs', 'main' | ForEach-Object { mkdir $_ -Force }
        touch logo.ico
      shell: pwsh
      if: runner.os == 'Windows'

    - name: Create dummy files for Nuitka to include (Unix)
      run: |
        mkdir -p dbs logs main
        touch logo.ico
      shell: bash
      if: runner.os != 'Windows'

    - name: Build Executable with Nuitka (Windows)
      if: runner.os == 'Windows'
      run: |
        # Windows PowerShell 语法：在同一会话中设置环境变量
        $env:DJANGO_SETTINGS_MODULE="bomiot.server.server.settings"
        $env:RUN_MAIN="true"
        $env:PYTHONPATH="$env:PYTHONPATH;."
        $env:PYTHONIOENCODING="utf-8"
        python build.py
      shell: pwsh
      
    - name: Build Executable with Nuitka (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        # Linux/macOS Bash 语法：在同一会话中设置环境变量
        export DJANGO_SETTINGS_MODULE="bomiot.server.server.settings"
        export RUN_MAIN="true"
        
        # 确保 Python 路径正确
        export PYTHONPATH="${{ github.workspace }}:${PYTHONPATH}"
        
        python build.py
      shell: bash
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }} Build
        path: | # match what's created for the 3 OSes
            build/*.exe
            build/*.bin
            build/*.app/**/*